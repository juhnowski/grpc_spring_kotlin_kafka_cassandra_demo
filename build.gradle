def protobufVersion = '3.6.1'
def grpcVersion = '1.15.1'

buildscript {
    ext {
        kotlinVersion = '1.3.20'
        springBootVersion = '2.1.3.RELEASE'
        grpcVersion = '1.18.0'
        protobufVersion = '3.6.1'
        protobufGradlePlugin = '0.8.8'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
        //classpath("com.google.protobuf:protobuf-gradle-plugin:${protobufGradlePlugin}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'docker'
//apply plugin: 'com.google.protobuf'
//apply plugin: 'idea'

group = 'com.juhnowski'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    providedRuntime
}

ext {
    set('springCloudVersion', 'Greenwich.RELEASE')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.cloud:spring-cloud-starter'
    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    //gRPC
//    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
//    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
//    implementation "io.grpc:grpc-stub:${grpcVersion}"
//    compileOnly "javax.annotation:javax.annotation-api:1.2"

}

// write this docker build task, this will run just after "./gradlew build" command
task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = bootJar.baseName
    dockerfile = file('Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

//protobuf {
//    protoc {
//        artifact = "com.google.protobuf:protoc:${protobufVersion}"
//    }
//    plugins {
//        grpc {
//            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
//        }
//        grpckotlin {
//            artifact = "io.rouz:grpc-kotlin-gen:0.1.0:jdk8@jar"
//        }
//    }
//    generateProtoTasks {
//        all()*.plugins {
//            grpc {}
//            grpckotlin {}
//        }
//    }
//}
//
//idea {
//    module {
//        sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
//        sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc");
//    }
//}
//compileKotlin.dependsOn ':generateProto'

sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/grpc'
sourceSets.main.java.srcDirs += 'build/generated/source/proto/main/java'